Route Parameters
- The data is trasported from one page to another as QueryString.
- Query String appends the data into URL and stores in browser. So that we can access the data from any page.

 http://localhost:4200/Electronics?category=mobiles&model=samsung


- Routing will not directly use the QueryString, It uses Route Parameters.

 http://localhost:4200/Electronics/mobiles/samsung

- Route Parameter is a Key - Value collection
- Every Parameter will have key and values are stored in the reference of keys.
- The keys are memory reference, which are not appended into the url like query string.
- Only values are appended into URL.
- You can access the route parameter in any component by using "paramMap" property defined in "ActivatedRoute" module.
 
Syntax:
1. Configure the route with parameters in 
	"app-routing.module.ts"

Syntax:
   {path: 'pathName/:param1/:param2, component: ComponentName}
     

2. Route Parameter can be appended dynamically into URL by using "routerLink".
   
   <a routerLink="path/param1/param2"> Text </a>

    URL :     localhost:4200/path/param1/param2

3. You can access these route parameters by using following method

Syntax:
           private  route: ActivatedRoute

           this.route.snapshot.paramMap.get("key");
           this.route.snapshot.paramMap.getAll();
           this.route.snapshot.paramMap.keys();

Routes	- Configuring Routes
RouterModule - Loading and Exporting routes
ActivatedRoute - To Access the router parameters.

- Route Parameter allows to query and display any specific content in the component.


Ex: Passing Parameters and Accessing in Component

1. Add a new component 
        > ng g c search

2. Goto "app-routing.module.ts"

    const routes : Routes = [
        .................
        {path: 'search/:id/:name/:price', component: SearchComponent},
        .................
      ];

3. Goto "app.component.html" and add routerLink

 <div class="btn-group text-white">
      <a routerLink="search/1/Mobile/14000" class="btn btn-primary">Search</a>
 </div>

4. Goto "search.component.ts"

import { ActivatedRoute } from '@angular/router';

export class SearchComponent{

  constructor(private route: ActivatedRoute) { }
  public id = this.route.snapshot.paramMap.get('id');
  public name = this.route.snapshot.paramMap.get('name');
  public price = this.route.snapshot.paramMap.get('price');
}

5. Goto "search.component.html"

<h2>Product Details</h2>
<dl>
    <dt>Product Id</dt>
    <dd>{{id}}</dd>
    <dt>Name</dt>
    <dd>{{name}}</dd>
    <dt>Price</dt>
    <dd>{{price}}</dd>
</dl>

Ex: Search and Filter Products
1. "app-routing.module.ts"

 {path: 'search/:category', component: SearchComponent},

2. "search.component.ts"

import { ActivatedRoute } from '@angular/router';

export class SearchComponent{

     constructor(private route: ActivatedRoute) {}

     public categoryname = this.route.snapshot.paramMap.get('category');

     public products = [
       {Name: 'Samsung TV', Price: 45000, Category: 'electronics'},
       {Name: 'Nike Casual', Price: 5000, Category: 'shoes'},
       {Name: 'Mobile', Price: 15000, Category: 'electronics'},
       {Name: 'Lee Cooper Boot', Price: 45000, Category: 'shoes'},
       {Name: 'Levis Jeans', Price: 45000, Category: 'fashion'},
     ];
     public filterdProducts = this.products.filter(x=>x.Category==this.categoryname);
     
}

3. Search.component.html

<h2>Search Products</h2>
<table class="table table-hover">
  <thead>
      <th>Name</th>
      <th>Price</th>
      <th>Category</th>
  </thead>
  <tbody>
      <tr *ngFor="let product of filterdProducts">
         <td>{{product.Name}}</td>
         <td>{{product.Price}}</td>
         <td>{{product.Category}}</td>
      </tr>
  </tbody>
</table>
